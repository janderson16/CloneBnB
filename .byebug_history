exit
Reservation.all
Reservation.count
exit
listing.range_available?(start_date, end_date) == false
listing.range_available?(start_date, end_date)
listing.present?
exit
reservations.where('end_date >= ? AND start_date <= ?', date, date).count
reservations.where('end_date >= ? AND start_date <= ?', date, date).count == 0
count_status
reservation_status
exit
listing.range_available?(start_date, end_date)
listing.reservations
listing.present?
exit
Reservation.count
reservation.persisted?
reservation
exit
@reservation.overlapping_reservations && @reservation.save
@reservation.overlapping_reservations
@reservation.save
@reservation.persisted?
Reservation.all
Reservation.count
params
exit
params
Reservation.count
self
exit
Reservation.first
Reservation.count
params
exit
listing.reservations
end_date
start_date
listing.id
Reservation.first
Reservation.count
listing.range_available?(self.start_date, self.end_date)
listing.range_available?(self.start_date, self.end_date) == false
exit
Reservation.count
end_date
start_date
listing.range_available?(start_date, end_date)
listing.present?
listing
exit
listing.reservations
reservation
exit
params
current_path
exit
listing.range_available?(start_date, end_date)
listing
self.start_date
self
exit
listing.date_available?(end_date)
listing.date_available?(start_date)
listing.date_available?(middle_date)
reservation.start_date
reservation
exit
"02/01/2018".to_date
listing.reservations.first.start_date
listing.reservations
listing.start_date
exit
status
exit
end_date.to_date
start_date.to_date
dates
exit
dates
exit
dates
exit
reservation.start_date
reservation
exit
@reservation.save
params
@reservation
exit
reservation.end_date
reservation.start_date
reservation
exit
params
exit
params
exit
params
exit
params
exit
params
exit
user_params == nil
params
exit
params
exit
user_one.roles
user_one
exit
params
exit
user.authenticate(params[:session][:password])
params
user
exit
params
